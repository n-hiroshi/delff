import numpy as np
import pandas as pd
import subprocess,os,sys,shutil,copy
import math
import time


class GaussianHandler():

    def get_system(self,gjffile):
        """
        This function reads a Gaussian input file (.gjf) and extracts the molecular system information 
        including the coordinates, lattice vectors (if any), and elements.

        Arguments:
            self: the instance of the class containing the function.
            gjffile: a string representing the path to the Gaussian input file (.gjf) to be read.

        Returns:
            coord: a 3D numpy array of shape (nmol, natom, 3), 
                   representing the coordinates of the atoms in the molecular system.
            lattice: a 2D numpy array of shape (3,3) or None, i
                   representing the lattice vectors of the system. 
                   If there is no lattice vector information, it is set to None.
            elements: a list of strings, representing the elements of the atoms in the molecular system.
            nmol: an integer, representing the number of molecules in the system.
            natom: an integer, representing the number of atoms in each molecule.
        """
        # read gjf
        fi2 = open(gjffile)
        for line in fi2: # reae gjf
            if line[0] == '#': break        

        ilatmat=0

        _ = fi2.readline() # vacant line

        # comment line
        # sytax:
        # [comment] nmol_natom [no. of molecules]_[no. of atoms in a molecule]
        words = fi2.readline().rstrip().split() 
        multimol=False
        for word in words: 
            if 'nmol_natom'==word:
                 multimol=True
                 nmollist=[]
                 natomlist=[]
                 continue
            if multimol: 
                 try: 
                     [nmol,natom] = [ int(v) for v in word.split('_')]
                 except: raise Error(words)
                 break;
        assert multimol

        _ = fi2.readline() # vacant line
        _ = fi2.readline() # charege multiplicity line

        coord = np.zeros((nmol*natom,3),float)
        lattice = None
        elements = []

        iatom = 0
        ilat = 0
        for line in fi2:
            words = line.rstrip().split()
            if len(words)>=1:
                if iatom<nmol*natom:
                    assert len(words)==4
                    elements.append(words[0])
                    coord[iatom,:] = np.asarray([float(v) for v in words[1:]])
                    iatom+=1
                elif words[0] == 'Tv':
                        if ilat==0: lattice=np.zeros((3,3),float)
                        lattice[ilat,:] = np.array([float(words[1]), float(words[2]), float(words[3])])
                        ilat+=1
        assert iatom==nmol*natom
        assert lattice is None or ilat==3

        coord = np.reshape(coord,(nmol,natom,3))
        fi2.close() 
        return coord,lattice,elements,nmol,natom

    def get_coord_log(self,logfile,nmol,natom):
        """
        This function reads the log file generated by Gaussian 16 
        and extracts the atomic coordinates of a molecule from it.
        Arguments:
            logfile: A string containing the name of the log file to be read.
            nmol: An integer specifying the number of molecules in the system.
            natom: An integer specifying the number of atoms in each molecule.
        Returns:
            coord: A NumPy array of shape (nmol, natom, 3) 
                containing the Cartesian coordinates of all the atoms in the system.
        """
        natomall = nmol*natom
        iline=0
        f=open(logfile)
        for line in f:
            iline+=1
            if 'Input orientation:' in line: line_coord=iline
            if 'Standard orientation:' in line: line_coord=iline
        line_coord += 5
        f.close()

        # get coord
        coord = np.zeros((nmol*natom,3),float)

        iline=0
        iatom=0
        flag_coord=False
        f=open(logfile)
        for line in f:
            iline+=1
            if iline==line_coord: flag_coord =True
            if iatom == natomall: break
            if flag_coord:
               words=line.rstrip().split()
               coord[iatom,:] = np.array([float(words[3]),float(words[4]),float(words[5])])
               iatom+=1
        f.close()

        coord = np.reshape(coord,(nmol,natom,3))
        return coord

    def get_info(self,logfile):
        """
        The function get_info reads a specified logfile line by line,
        looks for a line containing the string "SCF Done:",
        extracts the numerical value of the total energy from that line,
        and returns a dictionary with the key 'total_energy' and the extracted value as its value.

        Arguments:
            self: This argument refers to the instance of the class that this function belongs to.
            logfile: A string containing the path to the log file to be read.
        Returns:
            The function returns a dictionary with the key 'total_energy' 
            and the value of the total energy extracted from the log file.
            The dictionary is stored as an attribute logdict of the instance self.
        """

        f=open(logfile)
        for line in f:
            if 'SCF Done:' in line:
               words = line.rstrip().split()
               total_energy=float(words[4])
        f.close()

        self.logdict={'total_energy':total_energy}
        return self.logdict

